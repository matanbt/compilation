/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	// TODO check if ERROR and act accordingly
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
/* Keywords */
terminal CLASS;
terminal NIL;
terminal ARRAY;
terminal WHILE;
terminal TYPE_INT;
terminal EXTENDS;
terminal RETURN;
terminal NEW;
terminal IF;
terminal TYPE_STRING;
terminal TYPE_VOID;

/* chars */
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;

/* Error - special terminal for lexical error */
terminal ERROR;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal funcDec; // AST_FUNC_DEC
non terminal funcArgs; //AST_FUNC_ARGS_LIST
non terminal expList; //AST_FUNC_ARGS_LIST
non terminal program;
non terminal type;
non terminal decList;
non terminal dec;
non terminal AST_DEC_VAR varDec;
non terminal newExp;
non terminal binop;
non terminal classDec;
non terminal cFieldList;
non terminal cField;
non terminal arrayTypedef;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left LBRACK;
precedence left LPAREN;
precedence left DOT;


/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program     ::=     decList;

type        ::=     TYPE_INT | TYPE_STRING | TYPE_VOID | ID;

decList     ::=     dec:s   decList:l
                    | dec:s
                    ;

dec         ::=     varDec:s
                    | funcDec: s
                    | classDec:s
                    | arrayTypedef:s
                    ;

varDec      ::=     type:t ID:i SEMICOLON                       {: RESULT = new AST_DEC_VAR(t, i); :}
                    | type:t ID:i ASSIGN exp:e SEMICOLON        {: RESULT = new AST_DEC_VAR(t, i, e); :}
                    | type:t ID:i ASSIGN newExp:ne SEMICOLON    {: RESULT = new AST_DEC_VAR(t, i, ne); :}
                    ;
/** arrayDef **/
arrayTypedef    ::=     ARRAY ID EQ type LBRACK RBRACK SEMICOLON;

/** classDec **/

classDec    ::=     CLASS ID EXTENDS ID:name LBRACE cFieldList RBRACE      //{: RESULT = new AST_CLASSDEC(s,l,name);    :}
                    |  CLASS ID LBRACE cFieldList RBRACE                //{: RESULT = new AST_CLASSDEC(s,l,name);    :}
                    ;

cFieldList	::=		cField	cFieldList		//{: RESULT = new AST_CFIELD_LIST(s,l);    :}
					| cField				        //{: RESULT = new AST_CFIELD_LIST(s,null); :}
					;

cField    ::=       varDec
                    | funcDec
                    ;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;

stmt		::=		varDec
                    | var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | var:v ASSIGN newExp:e SEMICOLON
                    | RETURN SEMICOLON
                    | RETURN exp SEMICOLON
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| ID LPAREN RPAREN SEMICOLON
					| ID LPAREN expList RPAREN SEMICOLON
					| var DOT ID LPAREN LBRACE SEMICOLON
					| var DOT ID LPAREN expList RPAREN SEMICOLON
					;

// ----- Function Declaration -----
funcDec    ::=    type:type ID:fname LPAREN RPAREN LBRACE stmtList:body RBRACE           {: RESULT = new AST_STMT_LIST(null,null); :} // type+" "+ fname+ "() {...}"
                | type:type ID:fname LPAREN funcArgs RPAREN LBRACE stmtList:body RBRACE  {: RESULT = new AST_STMT_LIST(null, null); :} //type+" "+ fname+ "(..args...) {...}"
                ;

// Function arguments (one or more)
funcArgs   ::=   type ID COMMA funcArgs
                | type ID
                ;


exp         ::=     var:v								        {: RESULT = new AST_EXP_VAR(v); :}
                    | LPAREN exp:e RPAREN                       {: RESULT = e; :}
                    | exp:e1 binop:op exp:e2                    {: RESULT = new AST_EXP_BINOP(e1, e2, op); :}
                    | var:v DOT ID:i LPAREN expList:l RPAREN    {: RESULT = new AST_EXP_CALL(v, i, e); :}
                    | var:v DOT ID:i LPAREN RPAREN              {: RESULT = new AST_EXP_CALL(v, i); :}
                    | ID:i LPAREN expList:e RPAREN              {: RESULT = new AST_EXP_CALL(i, e); :}
                    | ID:i LPAREN RPAREN                        {: RESULT = new AST_EXP_CALL(i); :}
                    | MINUS INT:i                               {: RESULT = new AST_EXP_INT(-i); :}
                    | INT:i                                     {: RESULT = new AST_EXP_INT(i); :}
                    | NIL                                       {: RESULT = new AST_EXP_NIL(); :}
                    | STRING:s                                  {: RESULT = new AST_EXP_STRING(s); :}
                    ;

newExp      ::=     NEW ID:i
                    | NEW ID:i LBRACK exp:e RBRACK
                    ;

// one or more exp
expList	::=		exp:e COMMA expList:l
                | exp:e
                ;


binop       ::=     PLUS
                    | MINUS
                    | TIMES
                    | DIVIDE
                    | LT
                    | GT
                    | EQ
                    ;
